node {
    projectName="petclinic";
    dockerRegistryOrg="alexzhenyul"
    environment { 
        softwareVersion()
    }
    stage('Code') {
        stage('clean') {
            sh """ #!/bin/bash
                rm -rf spring-petclinic
            """
        }
        stage('clone') {
            git branch: 'main', url: 'git@github.com:alexzhenyul/petclinic_cicd.git'
        }
        stage('compile') {
            sh """ #!/bin/bash
                cd petclinic_application_code
                mvn clean install -DskipTests=true
            """
        }
    } 
    stage('Tests') {
        parallel unitTest: {
            stage ("unitTest") {
                timeout(time: 10, unit: 'MINUTES') {
                    sh """ #!/bin/bash
                        mvn test surefire-report:report

                        echo 'surefire report generated in http://localhost:8080/job/${projectName}/${env.BUILD_ID}/execution/node/3/ws/target/site/surefire-report.html'
                    """
                }
            } 
        }, checkstyle: {
            stage ("checkStyle") {
                timeout(time: 2, unit: 'MINUTES') {
                    sh """ #!/bin/bash
                        mvn validate
                    """
                } 
            }
        }, codeCoverage: {
            stage ("codeCoverage") {
                timeout(time: 2, unit: 'MINUTES') {
                    sh """ #!/bin/bash
                        mvn jacoco:report
                                    
                        echo 'Jacoco report generated in http://localhost:8080/job/${projectName}/${env.BUILD_ID}/execution/node/3/ws/target/site/jacoco/index.html'
                    """
                } 
            }
        }
    } 
    stage ("Container") {
        stage('build') {
            sh """ #!/bin/bash
                docker image build -f Dockerfile -t ${projectName}:${env.BUILD_ID} .
            """
        } 
        stage('tag') {
            parallel listContainers: {
                sh """ #!/bin/bash
                    docker container ls -a
                """
            }, listImages: {
                sh """ #!/bin/bash
                    docker image ls -a
                """
            }, tagBuildNumb: {
                    sh """ #!/bin/bash
                        docker tag ${projectName}:${env.BUILD_ID} alexzhenyul/${projectName}:${env.BUILD_ID}
                    """
            }, tagLatest: {
                sh """ #!/bin/bash
                    docker tag ${projectName}:${env.BUILD_ID} alexzhenyul/${projectName}:latest
                """
            }
        } 
        stage('provision server') {
            environment {
                AWS_ACCESS_KEY_ID = credentials('jenkins_aws_access_key_id')
                AWS_SECRET_ACCESS_KEY = credentials('jenkins_aws_secret_access_key')
                TF_VAR_env_prefix = 'test'
            }
            steps {
                script {
                    dir('terraform') {
                        sh "terraform init"
                        sh "terraform apply --auto-approve"
                        EC2_PUBLIC_IP = sh(
                            script: "terraform output ec2_public_ip",
                            returnStdout: true
                        ).trim()
                    }
                }
            }
        }
        stages {
        stage("copy files from local to ansible server") {
            steps {
                script {
                    echo "copying all neccessary files to ansible control node"
                    sshagent(['ansible-server-key']) {
                        sh "scp -o StrictHostKeyChecking=no ansible/* root@${ANSIBLE_SERVER}:/root"
                        withCredentials([sshUserPrivateKey(credentialsId: 'ec2-server-key', keyFileVariable: 'keyfile', usernameVariable: 'user')]) {
                            sh 'scp $keyfile root@$ANSIBLE_SERVER:/root/ssh-key.pem'
                        }
                    }
                }
            }
        }
        stage("execute ansible playbook") {
            steps {
                script {
                    echo "exec ansible playbook to configure ec2 instances"
                    def remote = [:]
                    remote.name = "ansible-server"
                    remote.host = ANSIBLE_SERVER
                    remote.allowAnyHosts = true

                    withCredentials([sshUserPrivateKey(credentialsId: 'ansible-server-key', keyFileVariable: 'keyfile', usernameVariable: 'user')]){
                        remote.user = user
                        remote.identityFile = keyfile
                        sshScript remote: remote, script: "prepare-ansible-server.sh"
                        sshCommand remote: remote, command: "ansible-playbook petclinic_playbook.yaml"
                    }
                }
            }
        }
        stage('deployment') {
            withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKER_REGISTRY_PWD', usernameVariable: 'DOCKER_REGISTRY_USER')]) {
                sh """ #!/bin/bash
                    docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PWD
                    echo 'Login success...'

                    docker push alexzhenyul/${projectName}:${env.BUILD_ID}
                    docker push alexzhenyul/${projectName}:latest

                    docker logout
                    echo 'Logut...'
                """
            }
        } 
        stage('clean') {
            sh """ #!/bin/bash 
                docker images ls 
                echo 'Deleting local images...' 

                docker rmi -f \$(docker images -aq)

                docker images ls 
            """ 
        } 
    }
}
def softwareVersion() {
    sh """ #!/bin/bash
        java -version
        mvn -version
        docker version
        echo '\n'
    """
}